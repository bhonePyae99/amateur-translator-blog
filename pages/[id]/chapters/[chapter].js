import Head from "next/head";
import { collection, getDocs, getDoc, doc } from "firebase/firestore";
import { db } from "../../../firebase-config";
import Chapter from "../../../components/Chapter";

// export async function getStaticPaths() {
//   const resp = await getDocs(collection(db, "WebNovels"));
//   const data = resp.docs.map((doc) => ({ ...doc.data(), id: doc.id }));
//   const ids = data.map((item) => item.id);
//   let paths = [];
//   const getChapters = async (id) => {
//     const resp = await getDocs(collection(db, "WebNovels", id, "chapters"));
//     const data = resp.docs.map((item) => ({ ...item.data(), id: item.id }));
//     return data;
//   };

//   for (let i = 0; i < ids.length; i++) {
//     const data = await getChapters(ids[i]);
//     for (let j = 0; j < data.length; j++) {
//       paths.push({ params: { id: ids[i], chapter: data[j].id } });
//     }
//   }
//   return {
//     paths,
//     fallback: true,
//   };
// }

export async function getServerSideProps(context) {
  context.res.setHeader(
    "Cache-Control",
    "public, s-maxage=60, stale-while-revalidate=59"
  );
  const resp = await getDoc(
    doc(
      collection(db, "WebNovels", context.params.id, "chapters"),
      context.params.chapter
    )
  );

  const bookResp = await getDoc(
    doc(collection(db, "WebNovels"), context.params.id)
  );

  if (!resp.exists()) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      data: {
        ...resp.data(),
        chapter: resp.id,
        bookId: context.params.id,
        chapCount: bookResp.data().chapCount,
      },
    },
  };
}

const chapter = ({ data }) => {
  return (
    <>
      <Head>
        <title>
          {data.bookTitle || ""} - Chapter {data.chapter || ""}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {data && <Chapter data={data} />}
    </>
  );
};

export default chapter;
